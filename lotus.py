import asyncio
import random
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import (
    FSInputFile,
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery
)

API_TOKEN = "8008348062:AAENy4fVc-TuHOLeKONbBKmcSW2RqD644Gs"

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

captcha_answers = {}

@dp.message(Command("start"))
async def start_handler(message: Message):
    image_path = "welcome.jpg"
    photo = FSInputFile(image_path)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üëâ –î–∞–ª–µ–µ", callback_data="captcha")]
        ]
    )

    await message.answer_photo(
        photo,
        caption="üå∏ –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¶–≤–µ—Ç–æ—á–Ω—ã–π | VCC & BA",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data == "captcha")
async def ask_captcha(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    num1 = random.randint(1, 9)
    num2 = random.randint(1, 9)
    answer = num1 + num2
    captcha_answers[user_id] = answer

    await callback_query.message.answer(
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã —á–µ–ª–æ–≤–µ–∫: —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç {num1} + {num2}?"
    )
    await callback_query.answer()

@dp.message()
async def captcha_check(message: Message):
    user_id = message.from_user.id
    if user_id not in captcha_answers:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ /start.")
        return

    try:
        user_answer = int(message.text)
        if user_answer == captcha_answers[user_id]:
            del captcha_answers[user_id]

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üå∏ –¶–≤–µ—Ç–æ—á–Ω—ã–π | VCC & BA",
                    url="https://t.me/+FKEQoNMlSOI3ZmNk"
                )]
            ])

            image_path = "welcome.jpg"
            photo = FSInputFile(image_path)

            await message.answer_photo(
                photo,
                caption=(
                    "üéâ –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –Ω–∞ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ!\n\n"
                    "–ú—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –±–æ–ª—å—à–æ–π —Ä—ã–Ω–æ–∫, –ø—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ —Ä–∞–±–æ—Ç–µ –∏ –≥–æ—Ç–æ–≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –¥–ª—è –≤–∞—Å –ª—É—á—à–∏–µ –Ω–∞ —Ä—ã–Ω–∫–µ "
                    "—É—Å–ª—É–≥–∏ –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ VCC & BA!\n\n"
                    "–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–π–¥–∏—Ç–µ –¥–ª—è —Å–µ–±—è —Ä–µ—à–µ–Ω–∏–µ —Å–≤–æ–∏—Ö –∑–∞–¥–∞—á!"
                ),
                reply_markup=keyboard
            )
        else:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /start")
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
